"use client";

import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import { usePathname } from "next/navigation";
import Link from "next/link";
import Image from "next/image";
import { createContext, useState, useEffect } from "react";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

/* export const metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};
*/
// Create a context to share the isLoggedIn state
export const AuthContext = createContext();

const apiUrl = process.env.REACT_APP_API_URL || 'http://localhost:4000';

export default function RootLayout({ children }) {
  const pathname = usePathname();
  const [isLoggedIn, setIsLoggedIn] = useState(false);
  const [loading, setLoading] = useState(true); // Track if authentication check is complete

  // Check for accessToken in localStorage on component mount
  useEffect(() => {
    const token = localStorage.getItem("accessToken");
    if (token) {
      setIsLoggedIn(true);
    }
    setLoading(false);
  }, []);

  const footer = (<footer className="row-start-3 flex gap-[24px] flex-wrap items-center justify-center">
    <a
      className="flex items-center gap-2 hover:underline hover:underline-offset-4"
      href="https://github.com/zx2486/DBConnectorToolkit"
      target="_blank"
      rel="noopener noreferrer"
    >
      <Image
        aria-hidden
        src="/file.svg"
        alt="File icon"
        width={16}
        height={16}
      />
      DBConnectorToolkit Github page
    </a>
    <a
      className="flex items-center gap-2 hover:underline hover:underline-offset-4"
      href="https://github.com/zx2486/DBConnectorSampleWeb"
      target="_blank"
      rel="noopener noreferrer"
    >
      <Image
        aria-hidden
        src="/window.svg"
        alt="Window icon"
        width={16}
        height={16}
      />
      DBConnectorToolkit Examples
    </a>
  </footer>);
  return (
    <AuthContext.Provider value={{ isLoggedIn, setIsLoggedIn, loading, apiUrl }}>
      <html lang="en">
        <body
          className={`${geistSans.variable} ${geistMono.variable} antialiased`}
        >
          {/* Conditionally render the back arrow if not on the main page */}
          {pathname !== "/" && (
            <div className="container">
              <div className="back-arrow">
                <Link href="/">‚Üê Back to Main Page</Link>
              </div>
              {children}
              {footer}
            </div>
          )}
          {pathname === "/" && (
            <div className="container">{children}{footer}</div>
          )}
        </body>
      </html>
    </AuthContext.Provider>
  );
}
